import java.util.Enumeration;
import java.util.Vector;

public class Room implements Enterable {

	private String description;
	private Enterable[] side = new Enterable[6];
	private Vector<Item> contents = new Vector<Item>();
	private Vector<Enemy> enemies = new Vector<Enemy>();
	private Enemy theEnemy = new Enemy();

	Room() {
		side[0] = new Wall();
		side[1] = new Wall();
		side[2] = new Wall();
		side[3] = new Wall();
		side[4] = new Wall();
		side[5] = new Wall();
	}
	public void setDesc(String d){
		description = d;
	}
	public void setSide(int direction, Enterable m){
		side[direction] = m;
	}
	public void addEnemy(Enemy theEnemy){
		enemies.addElement(this.theEnemy);
	}
	public Enemy getEnemy(){
		return  this.theEnemy;
	}
	public void removeEnemy(){
		enemies.removeElement(this.theEnemy);
	}
	public void addItem(Item theItem){
		contents.addElement(theItem); 
	}
	public void removeItem(Item theItem){
		contents.removeElement(theItem);
	}
	public boolean noEnemies(){
		return enemies.isEmpty();
	}
	public boolean roomEmpty(){
		return contents.isEmpty();
	}
	public Item[] getRoomContents(){
		Item[] contentsArray = new Item[contents.size()];
		contents.copyInto(contentsArray);
		return contentsArray;
	}
	public void enter(Player p, Gui gui) {
		p.setLoc(this); 
	}
	public void exit(int direction, Player p, Gui gui){
		side[direction].enter(p, gui);
	}
	public String getDesc(){
		Enumeration<Item> roomContents = contents.elements(); 
		String contentString = "";
		if(roomContents.hasMoreElements()){
			contentString = contentString + "-*-*-*-*-*-*              "+ ((Item) roomContents.nextElement()).getDesc() + "             *-*-*-*-*-*-";
		}
		else{
			contentString = "-*-*-*-*-*-*         Nothing, it's completely empty.     *-*-*-*-*-*-";
		}
		return description + '\n' + '\n' + "-*-*-*-*-*-*                This room has:               *-*-*-*-*-*-" 
			+ '\n' + contentString +'\n';
	}
}
